# -*- coding: utf-8 -*-
"""SignIn 607.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FkMwWJwrfYY83FLuZQHiB_XYUzVGxuhh
"""

import json

special_characters = ["*", "?", "!", "#", "&", "=", "(", ")", "_", "-"]

def validate_password(password): 
  # eliminate spaces
  present_spaces = password.find(" ")
  if present_spaces > -1:
    raise ValueError("Invalid password. Password contains spaces.")
  
  # validate length
  if len(password) < 8:
    raise ValueError("Invalid password. Password too short. Minimum 8 characters required.")
  
  # validate special characters
  present_special = 0
  present_digits = 0
  present_upper = 0
  for character in password:
    if character in special_characters:
      present_special += 1 # present_special_characters = present_special_characters + 1
    
    if character.isdigit():
      present_digits += 1

    if character.isupper():
      present_upper += 1

    if present_special and present_digits and present_upper:
      break

  if present_special == 0:
    raise ValueError("Invalid password. Special characters are missing.")

  if present_digits == 0:
    raise ValueError("Invalid password. Missing at least one digit.")

  if present_upper == 0:
    raise ValueError("Invalid password. Missing at least one upper case letter.")

  return password

def validate_email(email):
  email = email.lower()
  email = email.replace(" ", "")

  email_parts = email.split("@")

  if len(email_parts) > 2:
    raise ValueError("Email is not formatted correctly. Please try again.")
  
  second_part = email_parts[1]

  email_ending = second_part.split(".")

  if len(email_ending) > 2:
    raise ValueError("Email is not formatted correctly. Please try again.")

  return email

def is_unique(user, all_users):
  for existing_user in all_users:
    if existing_user["email"] == user["email"]:
      return False 
  
  return True
  
def save_to_file(user, filename):
  user["email"] = validate_email(user["email"])
  user["password"] = validate_password(user["password"])
  if user["password"] != user["second_password"]: 
    raise ValueError("Password mismatch. Try again using the same password.")

  with open(filename, "r") as f:
    try:
      existing_users = json.load(f)
    except Exception as e:
      existing_users = []
      print(f"--Warning! Something went wrong with loading data. Cause: {e}. Existing users initialised as [].")

    if not is_unique(user, existing_users):
      raise ValueError("User not unique")

  with open(filename, "w") as f:
    existing_users.append(user)
    json.dump(existing_users, f)

# load users
def load_users(filename):
  with open(filename, "r") as f:
    users = json.load(f)
  return users

# extragem utilizator dupa email 
def get_user_by_email(email, users):
  for user in users:
    if user["email"] == email:
      return user 

# signin
# 1. validate email
# 2. daca user exista, verificam parola data == parola existenta => True. In caz contrar => False / Eroare
def signin(user_details, filename):
  user_details["email"] = validate_email(user_details["email"])

  existing_users = load_users(filename)

  user = get_user_by_email(user_details["email"], existing_users)

  if user is None or user["password"] != user_details["password"]:
    return False

  return True

request_body = {
    "name": "B C",
    "email": "yer2@c.com",
    "password": "ysfhreA31!_-33",
    "second_password": "ysfhreA31!_-33"
}
save_to_file(request_body, "users.json")

load_users("users.json")

user_details = {
    "email": "y@c.com",
    "password": "ysfhreA31!_-33" 
}
signin(user_details, "users.json")